# Witness.ps1: This is an autogenerated file. Part of Nimble Group Management SDK. All edits to this file will be lost!
#
# Â© Copyright 2017 Hewlett Packard Enterprise Development LP.

function New-NSWitness 
{
[CmdletBinding()]
param(
    [Parameter(Mandatory = $True)]  [string] $username,
    [Parameter(Mandatory = $True)]  [string] $password,
    [Parameter(Mandatory = $True)]  [string] $host,
                                    [long] $port,
                                    [boolean] $secure_mode
  )
process {
        # Gather request params based on user input.
        $RequestData = @{}
        $ParameterList = (Get-Command -Name $MyInvocation.InvocationName).Parameters;
        foreach ($key in $ParameterList.keys)
        {
            $var = Get-Variable -Name $key -ErrorAction SilentlyContinue;
            if($var -and ($PSBoundParameters.ContainsKey($key)))
            {
                $RequestData.Add("$($var.name)", ($var.value))
            }
        }
        $Params = @{
            ObjectName = 'Witness'
            APIPath = 'witnesses'
            Properties = $RequestData
        }

        $ResponseObject = New-NimbleStorageAPIObject @Params
        return $ResponseObject
    }
}

function Get-NSWitness 
{
[CmdletBinding(DefaultParameterSetName='id')]
param(
    [Parameter(ParameterSetName='id')]
    [ValidatePattern('([0-9a-f]{2})([0-9a-f]{16})([0-9a-f]{16})([0-9a-f]{8})')]
    [string] $id,

    [Parameter(ParameterSetName='nonId')]
    [string]$username,

    [Parameter(ParameterSetName='nonId')]
    [string]$password,

    [Parameter(ParameterSetName='nonId')]
    [string]$host,

    [Parameter(ParameterSetName='nonId')]
    [long]$port,

    [Parameter(ParameterSetName='nonId')]
    [boolean]$secure_mode,

    [Parameter(ParameterSetName='nonId')]
    [Object[]]$auto_switchover_messages
  )
process
  {
    $API = 'witnesses'
    $Param = @{
      ObjectName = 'Witness'
      APIPath = 'witnesses'
    }
    if ($id)
    {
        # Get a single object for given Id.
        $Param.Id = $id
        $ResponseObject = Get-NimbleStorageAPIObject @Param
        return $ResponseObject
    }
    else
    {
        # Get list of objects matching the given filter.
        $Param.Filter = @{}
        $ParameterList = (Get-Command -Name $MyInvocation.InvocationName).Parameters;
        foreach ($key in $ParameterList.keys)
        {
            if ($key.ToLower() -ne 'fields')
            {
                $var = Get-Variable -Name $key -ErrorAction SilentlyContinue;
                if($var -and ($PSBoundParameters.ContainsKey($key)))
                {
                    $Param.Filter.Add("$($var.name)", ($var.value))
                }
            }
        }
        $ResponseObjectList = Get-NimbleStorageAPIObjectList @Param
        return $ResponseObjectList
    }
  }
}


function Remove-NSWitness 
{
[CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True, Mandatory = $True, ParameterSetName='id')]
    [string]$id
  )

process {
    $Params = @{
        ObjectName = 'Witness'
        APIPath = 'witnesses'
        Id = $id
    }
    Remove-NimbleStorageAPIObject @Params
  }
}

function Test-NSWitness 
{
[CmdletBinding()]
param (
    [Parameter(ValueFromPipelineByPropertyName=$True, Mandatory = $True)]
    [string]$id
  )
process{
    $Params = @{
        APIPath = 'witnesses'
        Action = 'test'
        ReturnType = 'List[NsWitnessTestResponse]'
    }
    $Params.Arguments = @{}
    $ParameterList = (Get-Command -Name $MyInvocation.InvocationName).Parameters;
    foreach ($key in $ParameterList.keys)
    {
        $var = Get-Variable -Name $key -ErrorAction SilentlyContinue;
        if($var -and ($PSBoundParameters.ContainsKey($key)))
        {
            $Params.Arguments.Add("$($var.name)", ($var.value))
        }
    }

    $ResponseObject = Invoke-NimbleStorageAPIAction @Params
    return $ResponseObject
  }
}
