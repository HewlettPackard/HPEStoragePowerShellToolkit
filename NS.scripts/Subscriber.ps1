# Subscriber.ps1: This is an autogenerated file. Part of Nimble Group Management SDK. All edits to this file will be lost!
#
# Â© Copyright 2023 Hewlett Packard Enterprise Development LP.

function New-NSSubscriber {
[CmdletBinding()]
param(
    [Parameter(Mandatory = $True)]
    [string] $type,
    [long] $renew_interval,
    [long] $renew_response_timeout
  )
process {
        # Gather request params based on user input.
        $RequestData = @{}
        $ParameterList = (Get-Command -Name $MyInvocation.InvocationName).Parameters;
        foreach ($key in $ParameterList.keys)
        {
            $var = Get-Variable -Name $key -ErrorAction SilentlyContinue;
            if($var -and ($PSBoundParameters.ContainsKey($key)))
            {
                $RequestData.Add("$($var.name)", ($var.value))
            }
        }
        $Params = @{
            ObjectName = 'Subscriber'
            APIPath = 'subscribers'
            Properties = $RequestData
        }

        $ResponseObject = New-NimbleStorageAPIObject @Params
        return $ResponseObject
    }
}

function Get-NSSubscriber 
{
[CmdletBinding(DefaultParameterSetName='id')]
param(
    [Parameter(ParameterSetName='id')]    [string] $id,
    [Parameter(ParameterSetName='nonId')] [string]$type,
    [Parameter(ParameterSetName='nonId')] [long]$renew_interval,
    [Parameter(ParameterSetName='nonId')] [long]$renew_response_timeout,
    [Parameter(ParameterSetName='nonId')] [boolean]$is_connected,
    [Parameter(ParameterSetName='nonId')] [long]$notification_count,
    [Parameter(ParameterSetName='nonId')] [boolean]$force
  )
process
  {
    $API = 'subscribers'
    $Param = @{
      ObjectName = 'Subscriber'
      APIPath = 'subscribers'
    }
    if ($id)
    {
        # Get a single object for given Id.
        $Param.Id = $id
        $ResponseObject = Get-NimbleStorageAPIObject @Param
        return $ResponseObject
    }
    else
    {
        # Get list of objects matching the given filter.
        $Param.Filter = @{}
        $ParameterList = (Get-Command -Name $MyInvocation.InvocationName).Parameters;
        foreach ($key in $ParameterList.keys)
        {
            if ($key.ToLower() -ne 'fields')
            {
                $var = Get-Variable -Name $key -ErrorAction SilentlyContinue;
                if($var -and ($PSBoundParameters.ContainsKey($key)))
                {
                    $Param.Filter.Add("$($var.name)", ($var.value))
                }
            }
        }
        $ResponseObjectList = Get-NimbleStorageAPIObjectList @Param
        return $ResponseObjectList
    }
  }
}

function Set-NSSubscriber 
{
[CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True, Mandatory = $True, ParameterSetName='all')]
    [string]$id,
    [long] $renew_interval,
    [long] $renew_response_timeout,
    [boolean] $force
  )
process {
        # Gather request params based on user input.
        $RequestData = @{}
        $ParameterList = (Get-Command -Name $MyInvocation.InvocationName).Parameters;
        foreach ($key in $ParameterList.keys)
        {
            if ($key.ToLower() -ne 'id')
            {
                $var = Get-Variable -Name $key -ErrorAction SilentlyContinue;
                if($var -and ($PSBoundParameters.ContainsKey($key)))
                {
                    $RequestData.Add("$($var.name)", ($var.value))
                }
            }
        }
        $Params = @{
            ObjectName = 'Subscriber'
            APIPath = 'subscribers'
            Id = $id
            Properties = $RequestData
        }
        $ResponseObject = Set-NimbleStorageAPIObject @Params
        return $ResponseObject
    }
}

function Remove-NSSubscriber 
{
[CmdletBinding()]
param(
    [Parameter(ValueFromPipeline=$True, ValueFromPipelineByPropertyName=$True, Mandatory = $True)]
    [string]$id
  )
process {
    $Params = @{
        ObjectName = 'Subscriber'
        APIPath = 'subscribers'
        Id = $id
    }
    Remove-NimbleStorageAPIObject @Params
  }
}
